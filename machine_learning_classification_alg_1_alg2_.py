# -*- coding: utf-8 -*-
"""Machine learning classification  ALg 1 alg2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fp_XvtTdQHIpkkrYK70wIbNm0j2neUDS
"""

!apt-get install openjdk-8-jdk-headless

# installing hadoop
!wget https://archive.apache.org/dist/spark/spark-3.2.1/spark-3.2.1-bin-hadoop2.7.tgz

#unzinpping the folder
!tar xf /content/spark-3.2.1-bin-hadoop2.7.tgz

# installing findspark library
!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.1-bin-hadoop2.7"

# locating spark system
import findspark
findspark.init()
findspark.find()

# setting the emvoironment
import pyspark
import numpy as np
import pandas as pd

from pyspark.context import SparkContext
from pyspark.sql.session import SparkSession
sc = SparkContext('local')
spark = SparkSession(sc)

flamingo = spark.read.csv('/content/drive/MyDrive/Big Data Management/datasets/flamingo-data/game-clicks.csv', sep=',', header=True, inferSchema=True, nullValue='NA')

flamingo.show(5)

flamingo.count()

# Remove the 'flight' column
flamingo1 = flamingo.drop('clickId')
flamingo2 = flamingo1.drop('timestamp')

flamingo2.show()

from pyspark.sql.functions import round
# Convert 'mile' to 'km' and drop 'mile' column


# Create 'label' column indicating whether flight delayed (1) or not(0)
flamingo2 = flamingo2.withColumn('label', (flamingo2.isHit >= 1).cast('integer'))

flamingo3 = flamingo2.drop('isHit')

# Check first five records
flamingo3.show(5)



from pyspark.ml.feature import VectorAssembler

# Create an assembler object
assembler = VectorAssembler(inputCols=[
    'teamLevel', 'count_hits',
], outputCol='features')

# Consolidate predictor columns
flamingo_assembled = assembler.transform(flamingo3)

# Check the resulting column
flamingo_assembled.select('features', 'label').show(5, truncate=False)

#Decision tree
# Split into training and test sets in a 80:20 ratio
flights_train, flights_test = flamingo_assembled.randomSplit([0.8, 0.2], seed=17)

# Check that training set has around 80% of records
training_ratio = flights_train.count() / flamingo_assembled.count()
print(training_ratio)

"""build decesion tree"""

from pyspark.ml.classification import DecisionTreeClassifier

# Create a classifier object and fit to the training data
tree = DecisionTreeClassifier()
tree_model = tree.fit(flights_train)

# Create predictions for the testing data and take a look at the predictions

prediction = tree_model.transform(flights_test)
prediction.select('label', 'prediction', 'probability').show(5, False)

# Create a confusion matrix
prediction.groupBy('label', 'prediction').count().show()

# Calculate the elements of the confusion matrix
TN = prediction.filter('prediction = 0 AND label = prediction').count()
TP = prediction.filter('prediction = 1 AND label = prediction').count()
FN = prediction.filter('prediction = 0 AND label = 1').count()
FP = prediction.filter('prediction = 1 AND label = 0').count()

# Accuracy measures the proportion of correct predictions
accuracy = (TN + TP) / (TN + TP + FN + FP)
print(accuracy)

from pyspark.ml.classification import LogisticRegression

# Selecting numeric columns
flights_train_num = flamingo3.select('features', 'label')
flights_test_num = flamingo3.select('features', 'label')

# Create classifier object and train on training data
logistic = LogisticRegression().fit(flights_train_num)

# Create a predictions for the test data and show confusion matrix
prediction = logistic.transform(flights_test_num)
prediction.groupBy("label", "prediction").count().show()

from pyspark.ml.feature import StringIndexer, OneHotEncoder
# conversion platformtype to numerical
indexer = StringIndexer(inputCol='platformType', outputCol='platformType_num').fit(flamingo)
indexed_df = indexer.transform(flamingo)

!jupyter nbconvert --to html notebook.ipynb